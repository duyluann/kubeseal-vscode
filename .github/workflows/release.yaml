name: Release and Publish Extension

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  release-and-publish:
    name: Release and Publish Extension
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install vsce
        run: npm install -g @vscode/vsce

      - name: Build extension
        run: npm run compile

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 18.0.0
          extra_plugins: |
            @semantic-release/changelog@6.0.0
            @semantic-release/git@10.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get semantic release info
        id: release_info
        run: |
          if [ "${{ steps.semantic.outputs.new_release_published }}" = "true" ]; then
            echo "published=true" >> $GITHUB_OUTPUT
            echo "version=${{ steps.semantic.outputs.new_release_version }}" >> $GITHUB_OUTPUT
            echo "tag_name=${{ steps.semantic.outputs.new_release_tag_name }}" >> $GITHUB_OUTPUT
            echo "release_url=${{ steps.semantic.outputs.new_release_url }}" >> $GITHUB_OUTPUT
          else
            echo "published=false" >> $GITHUB_OUTPUT
            echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          fi

      - name: Update package.json version if needed
        if: steps.release_info.outputs.published == 'true'
        run: |
          echo "Current package.json version: $(node -p "require('./package.json').version")"
          echo "Semantic release version: ${{ steps.release_info.outputs.version }}"

          # Update package.json version to match semantic-release
          npm version ${{ steps.release_info.outputs.version }} --no-git-tag-version

          echo "Updated package.json version: $(node -p "require('./package.json').version")"

      - name: Commit package.json version update
        if: steps.release_info.outputs.published == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: update package.json version to ${{ steps.release_info.outputs.version }}"

      - name: Package extension with semantic version
        if: steps.release_info.outputs.published == 'true'
        run: |
          echo "Packaging extension for version: ${{ steps.release_info.outputs.version }}"
          echo "Package.json version: $(node -p "require('./package.json').version")"
          vsce package --no-yarn

      - name: Upload VSIX to Release
        if: steps.release_info.outputs.published == 'true'
        run: |
          echo "Uploading VSIX for version: ${{ steps.release_info.outputs.version }}"
          # Get the release ID for the latest release
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/latest --jq '.id')

          # Upload the VSIX file
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets \
            --field name="kubeseal-vscode-${{ steps.release_info.outputs.version }}.vsix" \
            --field content_type="application/octet-stream" \
            --upload-file "./kubeseal-vscode-${{ steps.release_info.outputs.version }}.vsix"

          # Upload the updated package.json
          gh api repos/${{ github.repository }}/releases/$RELEASE_ID/assets \
            --field name="package.json" \
            --field content_type="application/json" \
            --upload-file "./package.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to VS Code Marketplace
        if: env.MARKETPLACE_PAT != '' && steps.release_info.outputs.published == 'true'
        run: |
          echo "${{ secrets.MARKETPLACE_PAT }}" | vsce login devops4life
        env:
          MARKETPLACE_PAT: ${{ secrets.MARKETPLACE_PAT }}

      - name: Publish to VS Code Marketplace
        if: env.MARKETPLACE_PAT != '' && steps.release_info.outputs.published == 'true'
        run: vsce publish
        env:
          MARKETPLACE_PAT: ${{ secrets.MARKETPLACE_PAT }}

      - name: Notify success
        run: |
          echo "‚úÖ Workflow completed successfully!"
          echo "üì¶ Version: ${{ steps.release_info.outputs.version }}"
          echo "üì¶ Extension: devops4life.kubeseal-vscode"
          if [ "${{ steps.release_info.outputs.published }}" = "true" ]; then
            echo "üè∑Ô∏è  Tag: ${{ steps.release_info.outputs.tag_name }}"
            echo "üîó GitHub Release: ${{ steps.release_info.outputs.release_url }}"
            echo "üîó VS Code Marketplace: https://marketplace.visualstudio.com/items?itemName=devops4life.kubeseal-vscode"
            if [ "${{ secrets.MARKETPLACE_PAT }}" != "" ]; then
              echo "‚úÖ Published to VS Code Marketplace"
            else
              echo "‚ö†Ô∏è  Skipped marketplace publishing (no PAT configured)"
            fi
          else
            echo "‚ÑπÔ∏è  No new release published (no semantic version bump)"
          fi
